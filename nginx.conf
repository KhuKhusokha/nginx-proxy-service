# /etc/nginx/conf.d/default.conf
# This file will be copied into your Nginx Docker container

# Define an upstream block for your n8n service
# IMPORTANT: Replace 'my-n8n-backend' with the actual INTERNAL name of your n8n service on Render.
# The port should match the N8N_PORT you set (e.g., 10000)
upstream n8n_backend {
    server my-n8n-backend.internal:10000; # <--- Update 'my-n8n-backend' to your n8n service's internal name
}

server {
    listen 80; # Nginx listens on port 80 internally
    listen [::]:80; # Listen on IPv6 as well

    # The server_name is optional on Render, as Render handles the public domain.
    # If you use a custom domain, you would uncomment and set it here:
    # server_name your-custom-domain.com;
    # Or for Render's default domain:
    # server_name nginx-latest-ze5n.onrender.com;

    # Main location block to proxy all requests to n8n
    location / {
        proxy_pass http://n8n_backend; # Forward requests to the n8n upstream

        # Essential proxy headers for n8n to function correctly
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # Tells n8n if original request was HTTP or HTTPS

        # Important for WebSocket connections (n8n UI, executions)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_redirect off; # Prevent Nginx from rewriting redirect headers

        # Optional: Increase proxy timeouts if you experience issues with long-running operations
        proxy_read_timeout 300s; # 5 minutes
        proxy_send_timeout 300s; # 5 minutes
    }

    # If you need to serve static files with Nginx for a custom front-end,
    # you'd add more location blocks here (e.g., location /static/ {} )
}
